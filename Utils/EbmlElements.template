class EbmlElementType:
    Master      = 0
    Int         = 1
    UInt        = 2
    Float       = 3
    AsciiString = 4
    Utf8String  = 5
    Date        = 6
    Binary      = 7
    Enum        = 8


class EbmlElementSpecification:
    def __init__(self, element_name: str, element_type: str, default = None, numeric_path = None, possible_values = None, enum_type = None):
        self.name = element_name
        self.type = element_type
        self.default = default
        self.numeric_path = numeric_path
        self.possible_values = possible_values
        self.enum_type = enum_type


EBML_ELEMENTS = {ebml_elements_placeholder}


def get_element_id_by_name(element_name: str) -> int:
    """
    Returns the ID of the element with the given name
    """
    for element_id, element_specification in EBML_ELEMENTS.items():
        if element_specification.name == element_name:
            return element_id

    raise NameError


def get_enum_value_by_name(element_name: str, enum_name: str):
    element_id = get_element_id_by_name(element_name)
    for enum_value, crnt_enum_name in EBML_ELEMENTS[element_id].possible_values.items():
        if crnt_enum_name == enum_name:
            return enum_value

    raise NameError